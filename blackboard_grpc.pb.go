// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: proto/blackboard.proto

package blackboard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlackboardService_WriteMessage_FullMethodName = "/blackboard.BlackboardService/WriteMessage"
	BlackboardService_ReadMessages_FullMethodName = "/blackboard.BlackboardService/ReadMessages"
	BlackboardService_ReadMessage_FullMethodName  = "/blackboard.BlackboardService/ReadMessage"
)

// BlackboardServiceClient is the client API for BlackboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlackboardServiceClient interface {
	WriteMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*WriteResponse, error)
	ReadMessages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (BlackboardService_ReadMessagesClient, error)
	ReadMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type blackboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlackboardServiceClient(cc grpc.ClientConnInterface) BlackboardServiceClient {
	return &blackboardServiceClient{cc}
}

func (c *blackboardServiceClient) WriteMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, BlackboardService_WriteMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blackboardServiceClient) ReadMessages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (BlackboardService_ReadMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlackboardService_ServiceDesc.Streams[0], BlackboardService_ReadMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &blackboardServiceReadMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlackboardService_ReadMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type blackboardServiceReadMessagesClient struct {
	grpc.ClientStream
}

func (x *blackboardServiceReadMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blackboardServiceClient) ReadMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, BlackboardService_ReadMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlackboardServiceServer is the server API for BlackboardService service.
// All implementations must embed UnimplementedBlackboardServiceServer
// for forward compatibility
type BlackboardServiceServer interface {
	WriteMessage(context.Context, *Message) (*WriteResponse, error)
	ReadMessages(*Empty, BlackboardService_ReadMessagesServer) error
	ReadMessage(context.Context, *Message) (*Message, error)
	mustEmbedUnimplementedBlackboardServiceServer()
}

// UnimplementedBlackboardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlackboardServiceServer struct {
}

func (UnimplementedBlackboardServiceServer) WriteMessage(context.Context, *Message) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteMessage not implemented")
}
func (UnimplementedBlackboardServiceServer) ReadMessages(*Empty, BlackboardService_ReadMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadMessages not implemented")
}
func (UnimplementedBlackboardServiceServer) ReadMessage(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMessage not implemented")
}
func (UnimplementedBlackboardServiceServer) mustEmbedUnimplementedBlackboardServiceServer() {}

// UnsafeBlackboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlackboardServiceServer will
// result in compilation errors.
type UnsafeBlackboardServiceServer interface {
	mustEmbedUnimplementedBlackboardServiceServer()
}

func RegisterBlackboardServiceServer(s grpc.ServiceRegistrar, srv BlackboardServiceServer) {
	s.RegisterService(&BlackboardService_ServiceDesc, srv)
}

func _BlackboardService_WriteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackboardServiceServer).WriteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlackboardService_WriteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackboardServiceServer).WriteMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackboardService_ReadMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlackboardServiceServer).ReadMessages(m, &blackboardServiceReadMessagesServer{stream})
}

type BlackboardService_ReadMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type blackboardServiceReadMessagesServer struct {
	grpc.ServerStream
}

func (x *blackboardServiceReadMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _BlackboardService_ReadMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackboardServiceServer).ReadMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlackboardService_ReadMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackboardServiceServer).ReadMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// BlackboardService_ServiceDesc is the grpc.ServiceDesc for BlackboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlackboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blackboard.BlackboardService",
	HandlerType: (*BlackboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteMessage",
			Handler:    _BlackboardService_WriteMessage_Handler,
		},
		{
			MethodName: "ReadMessage",
			Handler:    _BlackboardService_ReadMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadMessages",
			Handler:       _BlackboardService_ReadMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/blackboard.proto",
}
